fc_model_year_list = fc_list$make_model_year
tnc_fc_model_years = models_matched %>%
filter(str_detect(make_model_year,regex(paste(fc_model_year_list,collapse = "|"),ignore_case = TRUE)))
tnc_fc_model_years = tnc_fc_model_years %>%
mutate(powertrain = "FCV")
#-----------------------------SELECTING ICE VEHICLES----------------------------
tnc_ice_vehicles = anti_join(models_matched,tnc_ev_model_years) %>%
anti_join(tnc_fc_model_years) %>%
anti_join(tnc_hybrid_model_years) %>%
anti_join(tnc_phev_model_years) %>%
mutate(powertrain = "ICE")
#--------PUTTING ALL VEHICLE COUNTS TOGETHER AND WRITING TO CSV-----------------
tnc_vehicles = rbind(tnc_ice_vehicles,
tnc_ev_model_years,
tnc_phev_model_years,
tnc_hybrid_model_years,
tnc_fc_model_years)
# write.csv(tnc_vehicles,"TNC_vehicles_classified_all_years.csv")
monthly_composition = tnc_vehicles %>%
filter(powertrain != "FCV") %>%
group_by(powertrain,MONTH_REPORTED) %>%
summarize(vehicle_count = sum(count)) %>%
rbind(leftover_vehicles) %>%
pivot_wider(names_from = powertrain, values_from = vehicle_count) %>%
rowwise() %>%
mutate(total_vehicles = sum(ICE,EV,PHEV,Hybrid,not_identified),
pct_ICE = 100*round(ICE/total_vehicles,4),
pct_EV = 100*round(EV/total_vehicles,4),
pct_Hybrid = 100*round(Hybrid/total_vehicles,4),
pct_PHEV = 100*round(PHEV/total_vehicles,4),
pct_no_ID = 100*round(not_identified/total_vehicles,4),
date = as.POSIXct(paste0(MONTH_REPORTED,"-01"),format = "%Y-%m-%d")) %>%
pivot_longer(cols = c(pct_ICE,pct_EV,pct_PHEV,pct_Hybrid,pct_no_ID), names_to = "powertrain", values_to = "fleet_pct") %>%
ungroup()
write.csv(monthly_composition,"TNC_monthly_composition_IL_all_years.csv")
ev_count = read.csv("Chicago_EV_Counts.csv")
ff_count = read.csv("Chicago_FlexFuel_Count.csv")
h_count = read.csv("Chicago_Hybrid_Count.csv")
all_count = read.csv("Chicago_all_count.csv")
# processing
alt_veh = rbind(ev_count %>% mutate(powertrain = "EV"),
ff_count %>% mutate(powertrain = "Flex_Fuel"),
h_count %>% mutate(powertrain = "Hybrid"))
alt_veh_count = alt_veh %>%
mutate(count = rowSums(alt_veh %>% select(starts_with("X")),na.rm = TRUE),
date_format = case_when(powertrain == "EV" ~ paste0(substr(Date,1,nchar(Date)-2),"20",substr(Date,nchar(Date)-1,nchar(Date))),
.default = Date),
date = case_when(powertrain == "EV" ~ as.POSIXct(date_format, format = "%m/%d/%Y"),
.default = as.POSIXct(date_format, format = "%Y-%m-%d"))) %>%
select(date,powertrain,count) %>%
filter(date > as.POSIXct("2017-12-15",format = "%Y-%m-%d")) %>%
pivot_wider(names_from = powertrain, values_from = count)
all_count_new = data.frame(date = alt_veh_count$date,all = c(rep(all_count$Passenger_Vehicle_Count[1],12),
rep(all_count$Passenger_Vehicle_Count[2],11),
rep(all_count$Passenger_Vehicle_Count[3],12),
rep(all_count$Passenger_Vehicle_Count[4],12),
rep(all_count$Passenger_Vehicle_Count[5],12),
rep(all_count$Passenger_Vehicle_Count[6],12),
rep(all_count$Passenger_Vehicle_Count[7],5)))
all_veh = left_join(alt_veh_count,all_count_new, by = join_by(date)) %>%
mutate(ICE = all - EV - Hybrid,
pct_ICE = 100*round(ICE/all,4),
pct_EV = 100*round(EV/all,4),
pct_Hybrid = 100*round(Hybrid/all,4)) %>%
pivot_longer(cols = pct_ICE:pct_Hybrid,
names_to = "powertrain",
values_to = "vehicle_pct") %>%
mutate(powertrain = case_when(powertrain == "pct_EV" ~ "'Electric'",
powertrain == "pct_Hybrid" ~ "'Hybrid'",
.default = "ICE"))
breaks = seq.POSIXt(from = as.POSIXct("2018-06-01", format = "%Y-%m-%d"), to = as.POSIXct("2024-04-01", format = "%Y-%m-%d"), by = "6 months")
ggplot(data = all_veh, aes(x = date, y = vehicle_pct, color = powertrain)) +
geom_line() +
ylab("% of Total Vehicle Fleet") +
xlab("Month Reported") +
labs(color = "Powertrain") +
ggtitle("Chicago Residential Vehicles Powertrain Evolution over Time") +
scale_x_datetime(breaks = breaks, date_labels = "%m-%Y") +
scale_y_continuous(breaks = seq(0,100, by = 10), limits = c(0,100)) +
geom_vline(xintercept = as.POSIXct("2022-05-01",format = "%Y-%m-%d"), color = "blue", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2022-09-15",format = "%Y-%m-%d"), color = "blue") +
geom_vline(xintercept = as.POSIXct("2020-09-01",format = "%Y-%m-%d"), color = "black", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2023-06-01",format = "%Y-%m-%d"), color = "black") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
tnc_fleet = read.csv("TNC_monthly_composition_IL_all_years.csv") %>%
mutate(datetime = as.POSIXct(date, format = "%Y-%m-%d") + 3600*24*14) %>%
select(datetime,ICE,EV,Hybrid,PHEV,total_vehicles) %>%
rename(ICE_TNC = ICE, EV_TNC = EV, Hybrid_TNC = Hybrid, PHEV_TNC = PHEV, total_TNC = total_vehicles)
tnc_res = tnc_fleet %>%
distinct() %>%
left_join(all_veh %>% select(-vehicle_pct,-powertrain) %>%  distinct(),
by = join_by("datetime" == "date")) %>%
mutate(EV_overall = EV - EV_TNC,
hybrid_overall = Hybrid - Hybrid_TNC - PHEV_TNC, # CHANGE THIS IF YOU FIND OUT WHERE PHEVs GO
ICE_overall = ICE - ICE_TNC)
all_veh_adjusted = tnc_res %>%
select(datetime,EV_overall, hybrid_overall,ICE_overall) %>%
mutate(total = EV_overall + hybrid_overall + ICE_overall,
pct_ICE = 100*round(ICE_overall/total,4),
pct_EV = 100*round(EV_overall/total,4),
pct_hybrid = 100*round(hybrid_overall/total,4)) %>%
pivot_longer(cols = pct_ICE:pct_hybrid,
names_to = powertrain,
values_to = vehicles_pct)
all_veh_adjusted = tnc_res %>%
select(datetime,EV_overall, hybrid_overall,ICE_overall) %>%
mutate(total = EV_overall + hybrid_overall + ICE_overall,
pct_ICE = 100*round(ICE_overall/total,4),
pct_EV = 100*round(EV_overall/total,4),
pct_hybrid = 100*round(hybrid_overall/total,4))
View(all_veh_adjusted)
View(tnc_res)
View(all_count_new)
View(all_veh)
tnc_res = tnc_fleet %>%
distinct() %>%
left_join(all_veh %>% select(-vehicle_pct,powertrain) %>%  distinct(),
by = join_by("datetime" == "date")) %>%
mutate(EV_overall = EV - EV_TNC,
hybrid_overall = Hybrid - Hybrid_TNC - PHEV_TNC, # CHANGE THIS IF YOU FIND OUT WHERE PHEVs GO
ICE_overall = ICE - ICE_TNC)
tnc_res = tnc_fleet %>%
distinct() %>%
left_join(all_veh %>% select(-vehicle_pct) %>%  distinct(),
by = join_by("datetime" == "date")) %>%
mutate(EV_overall = EV - EV_TNC,
hybrid_overall = Hybrid - Hybrid_TNC - PHEV_TNC, # CHANGE THIS IF YOU FIND OUT WHERE PHEVs GO
ICE_overall = ICE - ICE_TNC)
View(tnc_fleet)
meep = read.csv("TNC_monthly_composition_IL_all_years.csv")
View(meep)
tnc_fleet = read.csv("TNC_monthly_composition_IL_all_years.csv") %>%
mutate(datetime = as.POSIXct(paste0(MONTH_REPORTED,'-15'), format = "%Y-%m-%d")) %>%
select(datetime,ICE,EV,Hybrid,PHEV,total_vehicles) %>%
rename(ICE_TNC = ICE, EV_TNC = EV, Hybrid_TNC = Hybrid, PHEV_TNC = PHEV, total_TNC = total_vehicles)
tnc_res = tnc_fleet %>%
distinct() %>%
left_join(all_veh %>% select(-vehicle_pct) %>%  distinct(),
by = join_by("datetime" == "date")) %>%
mutate(EV_overall = EV - EV_TNC,
hybrid_overall = Hybrid - Hybrid_TNC - PHEV_TNC, # CHANGE THIS IF YOU FIND OUT WHERE PHEVs GO
ICE_overall = ICE - ICE_TNC)
all_veh_adjusted = tnc_res %>%
select(datetime,EV_overall, hybrid_overall,ICE_overall) %>%
mutate(total = EV_overall + hybrid_overall + ICE_overall,
pct_ICE = 100*round(ICE_overall/total,4),
pct_EV = 100*round(EV_overall/total,4),
pct_hybrid = 100*round(hybrid_overall/total,4))
View(all_veh_adjusted)
all_veh_adjusted = tnc_res %>%
select(datetime,EV_overall, hybrid_overall,ICE_overall) %>%
mutate(total = EV_overall + hybrid_overall + ICE_overall,
pct_ICE = 100*round(ICE_overall/total,4),
pct_EV = 100*round(EV_overall/total,4),
pct_hybrid = 100*round(hybrid_overall/total,4)) %>%
pivot_longer(cols = pct_ICE:pct_hybrid,
names_to = powertrain,
values_to = vehicles_pct)
all_veh_adjusted = tnc_res %>%
select(datetime,EV_overall, hybrid_overall,ICE_overall) %>%
mutate(total = EV_overall + hybrid_overall + ICE_overall,
pct_ICE = 100*round(ICE_overall/total,4),
pct_EV = 100*round(EV_overall/total,4),
pct_hybrid = 100*round(hybrid_overall/total,4)) %>%
pivot_longer(cols = pct_ICE:pct_hybrid,
names_to = "powertrain",
values_to = "vehicles_pct")
ggplot(data = all_veh_adjusted, aes(x = date, y = vehicle_pct, color = powertrain)) +
geom_line() +
ylab("% of Total Vehicle Fleet") +
xlab("Month Reported") +
labs(color = "Powertrain") +
ggtitle("Chicago Residential Vehicles Powertrain Evolution over Time\n[with TNCs registered in IL subtracted]") +
scale_x_datetime(breaks = breaks, date_labels = "%m-%Y") +
scale_y_continuous(breaks = seq(0,100, by = 10), limits = c(0,100)) +
geom_vline(xintercept = as.POSIXct("2022-05-01",format = "%Y-%m-%d"), color = "blue", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2022-09-15",format = "%Y-%m-%d"), color = "blue") +
geom_vline(xintercept = as.POSIXct("2020-09-01",format = "%Y-%m-%d"), color = "black", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2023-06-01",format = "%Y-%m-%d"), color = "black") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
all_veh_adjusted = tnc_res %>%
select(datetime,EV_overall, hybrid_overall,ICE_overall) %>%
mutate(total = EV_overall + hybrid_overall + ICE_overall,
pct_ICE = 100*round(ICE_overall/total,4),
pct_EV = 100*round(EV_overall/total,4),
pct_hybrid = 100*round(hybrid_overall/total,4)) %>%
pivot_longer(cols = pct_ICE:pct_hybrid,
names_to = "powertrain",
values_to = "vehicle_pct")
ggplot(data = all_veh_adjusted, aes(x = date, y = vehicle_pct, color = powertrain)) +
geom_line() +
ylab("% of Total Vehicle Fleet") +
xlab("Month Reported") +
labs(color = "Powertrain") +
ggtitle("Chicago Residential Vehicles Powertrain Evolution over Time\n[with TNCs registered in IL subtracted]") +
scale_x_datetime(breaks = breaks, date_labels = "%m-%Y") +
scale_y_continuous(breaks = seq(0,100, by = 10), limits = c(0,100)) +
geom_vline(xintercept = as.POSIXct("2022-05-01",format = "%Y-%m-%d"), color = "blue", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2022-09-15",format = "%Y-%m-%d"), color = "blue") +
geom_vline(xintercept = as.POSIXct("2020-09-01",format = "%Y-%m-%d"), color = "black", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2023-06-01",format = "%Y-%m-%d"), color = "black") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
View(all_veh_adjusted)
ggplot(data = all_veh_adjusted, aes(x = datetime, y = vehicle_pct, color = powertrain)) +
geom_line() +
ylab("% of Total Vehicle Fleet") +
xlab("Month Reported") +
labs(color = "Powertrain") +
ggtitle("Chicago Residential Vehicles Powertrain Evolution over Time\n[with TNCs registered in IL subtracted]") +
scale_x_datetime(breaks = breaks, date_labels = "%m-%Y") +
scale_y_continuous(breaks = seq(0,100, by = 10), limits = c(0,100)) +
geom_vline(xintercept = as.POSIXct("2022-05-01",format = "%Y-%m-%d"), color = "blue", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2022-09-15",format = "%Y-%m-%d"), color = "blue") +
geom_vline(xintercept = as.POSIXct("2020-09-01",format = "%Y-%m-%d"), color = "black", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2023-06-01",format = "%Y-%m-%d"), color = "black") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
all_veh_adjusted = tnc_res %>%
select(datetime,EV_overall, hybrid_overall,ICE_overall) %>%
mutate(total = EV_overall + hybrid_overall + ICE_overall,
pct_ICE = 100*round(ICE_overall/total,4),
pct_EV = 100*round(EV_overall/total,4),
pct_hybrid = 100*round(hybrid_overall/total,4)) %>%
pivot_longer(cols = pct_ICE:pct_hybrid,
names_to = "powertrain",
values_to = "vehicle_pct") %>%
mutate(powertrain = case_when(powertrain == "pct_ICE" ~ "ICE",
powertrain == "pct_hybrid" ~ "'Hybrid'",
.default = "'Electric'"))
ggplot(data = all_veh_adjusted, aes(x = datetime, y = vehicle_pct, color = powertrain)) +
geom_line() +
ylab("% of Total Vehicle Fleet") +
xlab("Month Reported") +
labs(color = "Powertrain") +
ggtitle("Chicago Residential Vehicles Powertrain Evolution over Time\n[with TNCs registered in IL subtracted]") +
scale_x_datetime(breaks = breaks, date_labels = "%m-%Y") +
scale_y_continuous(breaks = seq(0,100, by = 10), limits = c(0,100)) +
geom_vline(xintercept = as.POSIXct("2022-05-01",format = "%Y-%m-%d"), color = "blue", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2022-09-15",format = "%Y-%m-%d"), color = "blue") +
geom_vline(xintercept = as.POSIXct("2020-09-01",format = "%Y-%m-%d"), color = "black", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2023-06-01",format = "%Y-%m-%d"), color = "black") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
all_data_combined = rbind(all_veh_adjusted %>% mutate(status = "adjusted"),
all_veh %>% mutate(status = "unadjusted"))
View(all_veh)
View(all_veh_adjusted)
select(-Flex_Fuel,datetime,EV_overall,hybrid_overall,ICE_overall,total,
powertrain,vehicle_pct) %>%
all_data_combined = rbind(all_veh_adjusted %>% mutate(status = "adjusted"),
all_veh %>% mutate(status = "unadjusted"))
formatted_all_veh = all_veh %>%
rename(datetime = date, EV_overall = EV, hybrid_overall = Hybrid,
ICE_overall = ICE, all = total) %>%
select(-Flex_Fuel) %>%
select(datetime,EV_overall,hybrid_overall,ICE_overall,total, powertrain,vehicle_pct)
formatted_all_veh = all_veh %>%
rename(datetime = date, EV_overall = EV, hybrid_overall = Hybrid,
ICE_overall = ICE, total = all) %>%
select(-Flex_Fuel) %>%
select(datetime,EV_overall,hybrid_overall,ICE_overall,total, powertrain,vehicle_pct)
all_data_combined = rbind(all_veh_adjusted %>% mutate(status = "adjusted"),
all_veh %>% mutate(status = "unadjusted"))
all_data_combined = rbind(all_veh_adjusted %>% mutate(status = "adjusted"),
formatted_all_veh %>% mutate(status = "unadjusted"))
all_res_data_combined = rbind(all_veh_adjusted %>% mutate(status = "adjusted"),
formatted_all_veh %>% mutate(status = "unadjusted"))
ggplot(data = all_res_data_combined, aes(x = datetime, y = vehicle_pct, color = powertrain)) +
geom_line() +
ylab("% of Total Vehicle Fleet") +
xlab("Month Reported") +
labs(color = "Powertrain") +
ggtitle("Chicago Residential Vehicles Powertrain Evolution over Time\n[with TNCs registered in IL subtracted]") +
scale_x_datetime(breaks = breaks, date_labels = "%m-%Y") +
scale_y_continuous(breaks = seq(0,100, by = 10), limits = c(0,100)) +
geom_vline(xintercept = as.POSIXct("2022-05-01",format = "%Y-%m-%d"), color = "blue", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2022-09-15",format = "%Y-%m-%d"), color = "blue") +
geom_vline(xintercept = as.POSIXct("2020-09-01",format = "%Y-%m-%d"), color = "black", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2023-06-01",format = "%Y-%m-%d"), color = "black") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = all_res_data_combined, aes(x = datetime, y = vehicle_pct, color = powertrain,
lintype = status)) +
geom_line() +
ylab("% of Total Vehicle Fleet") +
xlab("Month Reported") +
labs(color = "Powertrain") +
ggtitle("Chicago Residential Vehicles Powertrain Evolution over Time\n[with TNCs registered in IL subtracted]") +
scale_x_datetime(breaks = breaks, date_labels = "%m-%Y") +
scale_y_continuous(breaks = seq(0,100, by = 10), limits = c(0,100)) +
geom_vline(xintercept = as.POSIXct("2022-05-01",format = "%Y-%m-%d"), color = "blue", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2022-09-15",format = "%Y-%m-%d"), color = "blue") +
geom_vline(xintercept = as.POSIXct("2020-09-01",format = "%Y-%m-%d"), color = "black", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2023-06-01",format = "%Y-%m-%d"), color = "black") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = all_res_data_combined, aes(x = datetime, y = vehicle_pct, color = powertrain,
linetype = status)) +
geom_line() +
ylab("% of Total Vehicle Fleet") +
xlab("Month Reported") +
labs(color = "Powertrain") +
ggtitle("Chicago Residential Vehicles Powertrain Evolution over Time\n[with TNCs registered in IL subtracted]") +
scale_x_datetime(breaks = breaks, date_labels = "%m-%Y") +
scale_y_continuous(breaks = seq(0,100, by = 10), limits = c(0,100)) +
geom_vline(xintercept = as.POSIXct("2022-05-01",format = "%Y-%m-%d"), color = "blue", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2022-09-15",format = "%Y-%m-%d"), color = "blue") +
geom_vline(xintercept = as.POSIXct("2020-09-01",format = "%Y-%m-%d"), color = "black", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2023-06-01",format = "%Y-%m-%d"), color = "black") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = all_res_data_combined, aes(x = datetime, y = vehicle_pct, color = powertrain,
linetype = status)) +
geom_line() +
ylab("% of Total Vehicle Fleet") +
xlab("Month Reported") +
labs(color = "Powertrain") +
ggtitle("Chicago Residential Vehicles Powertrain Evolution over Time\n[with TNCs registered in IL subtracted]") +
scale_x_datetime(breaks = breaks, date_labels = "%m-%Y") +
scale_y_continuous(breaks = seq(0,100, by = 10), limits = c(0,100)) +
geom_vline(xintercept = as.POSIXct("2022-05-01",format = "%Y-%m-%d"), color = "blue", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2022-09-15",format = "%Y-%m-%d"), color = "blue") +
geom_vline(xintercept = as.POSIXct("2020-09-01",format = "%Y-%m-%d"), color = "black", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2023-06-01",format = "%Y-%m-%d"), color = "black") +
theme_bw() +
labs(linetype = "Data Status") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
View(leftover)
View(leftover)
sum(leftover$count)
nrow(leftover %>% distinct(make_model))
install.packages('Rsocrata')
yes
install.packages('RSocrata')
library(RSocrata)
library(tidyverse)
library(dplyr)
df = read.socrata(url = "https://data.cityofchicago.org/resource/97wa-y6ff.json",
app_token = "NRZAZqgR2lywoiW7H1fALVgDa")
View(df)
df = read.socrata(url = "https://data.cityofchicago.org/resource/tx35-q6ia.json?$query=SELECT%0A%20%20%60vehicle_type%60%2C%0A%20%20%60public_vehicle_number%60%2C%0A%20%20%60status%60%2C%0A%20%20%60vehicle_make%60%2C%0A%20%20%60vehicle_model%60%2C%0A%20%20%60vehicle_model_year%60%2C%0A%20%20%60vehicle_color%60%2C%0A%20%20%60vehicle_fuel_source%60%2C%0A%20%20%60wheelchair_accessible%60%2C%0A%20%20%60company_name%60%2C%0A%20%20%60address%60%2C%0A%20%20%60city%60%2C%0A%20%20%60state%60%2C%0A%20%20%60zip_code%60%2C%0A%20%20%60taxi_affiliation%60%2C%0A%20%20%60taxi_medallion_license_management%60%2C%0A%20%20%60record_id%60%2C%0A%20%20%60last_valid_date%60%2C%0A%20%20%60record_version_id%60%0AWHERE%20caseless_one_of(%60vehicle_type%60%2C%20%22Livery%22%2C%20%22Taxi%22%2C%20%22Jitney%22)%0AORDER%20BY%20%60record_id%60%20ASC%20NULL%20LAST%2C%20%60last_valid_date%60%20DESC%20NULL%20FIRST",
app_token = "NRZAZqgR2lywoiW7H1fALVgDa")
df = read.socrata(url = "https://data.cityofchicago.org/resource/tx35-q6ia.json",
app_token = "NRZAZqgR2lywoiW7H1fALVgDa")
write.csv(df,"public_passenger_license_data.csv")
library(dplyr)
library(tidyverse)
library(stringdist)
#------------------------------DEFINING FUNCTIONS-------------------------------
# DESCRIPTION: Function below deals with long names that may have been shortened
# (e.g., C40 Recharge vs. C40 Recharge Twin)
# INPUTS:
# - tnc_models: all TNC models of a given powertrain that were able to be matched
# to a vehicle listed in the FE data (includes make)
# - tnc_model_years: the same as tnc_models but includes the year of the vehicle
# - atv_label: given powertrain you are looking at ("hybrid","ev",etc.)
# OUTPUTS:
# - tnc_model_years: s
add_shortened_names = function(tnc_models,tnc_model_years,atv_label) {
not_captured = anti_join(tnc_models,tnc_model_years,by = "make_model_year")
# ^^these are now all models that don't actually exist for the year listed
# (as in they hand't been manufactured yet in the year listed) AND models
# incorrectly captured by not including the year (see more details in hybrid section)
not_captured_models = not_captured %>% group_by(make_model_year,make_model,YEAR) %>% summarize(count_models = sum(count))
not_captured_models_v2 = not_captured_models
nc_count = sum(not_captured_models$count_models)
print(paste("Initial discrepancy in model classifications:",nc_count,"vehicles"))
for (ind in 1:nrow(not_captured_models)) {
one_make_model = not_captured_models$make_model[ind]
vehicle_yr = not_captured_models$YEAR[ind]
model_listed = fe_vehicles %>% filter(str_detect(make_model,regex(one_make_model,ignore_case = TRUE)))
atv_types = model_listed %>% group_by(atvType) %>% summarize(count = n())
if (nrow(atv_types) == 1 & vehicle_yr %in% model_listed$year) {
if (atv_types$atvType[1] == atv_label) {
new_rows = models_matched %>% filter(str_detect(make_model_year,not_captured_models$make_model_year[ind]))
tnc_model_years = rbind(tnc_model_years,new_rows)
not_captured_models_v2 = not_captured_models_v2 %>% filter(!(make_model_year == not_captured_models$make_model_year[ind]))
}
}
}
nc_count_v2 = sum(not_captured_models_v2$count_models)
print(paste("Final discrepancy in model classifications:",nc_count_v2,"vehicles"))
return(tnc_model_years)
}
#--------------------------READING IN TNC VEHICLE DATA--------------------------
ppl_vehicles = read.csv("public_passenger_license_data.csv")
View(ppl_vehicles)
ppl_vehicles = ppl_vehicles %>% arrange(public_vehicle_number)
View(ppl_vehicles)
ppl_vehicles = ppl_vehicles %>%
filter(vehicle_type %in% c("Taxi","Livery","Jitney"))
#----------------READING IN TNC VEHICLE DATA & PROCESSING-----------------------
ppl_vehicles = read.csv("public_passenger_license_data.csv")
ppl_filtered = ppl_vehicles %>%
filter(vehicle_type %in% c("Taxi","Livery","Jitney"))
View(ppl_filtered)
ppl_filtered = ppl_vehicles %>%
filter(vehicle_type %in% c("Taxi","Livery","Jitney")) %>%
arrange(public_vehicle_number)
View(ppl_filtered)
ppl_filtered = ppl_vehicles %>%
filter(vehicle_type %in% c("Taxi","Livery","Jitney")) %>%
arrange(public_vehicle_number, vehicle_model_year)
View(ppl_filtered)
ppl_filtered %>% distinct(vehicle_fuel_source)
ppl_filtered = ppl_vehicles %>%
filter(vehicle_type %in% c("Taxi","Livery","Jitney")) %>%
arrange(X)
View(ppl_filtered)
ppl_filtered = ppl_vehicles %>%
filter(vehicle_type %in% c("Taxi","Livery","Jitney")) %>%
arrange(public_vehicle_number, vehicle_model_year) %>%
select(-X,-record_version_id)
View(ppl_filtered)
ppl_filtered = ppl_vehicles %>%
filter(vehicle_type %in% c("Taxi","Livery","Jitney")) %>%
arrange(public_vehicle_number, vehicle_model_year) %>%
select(-X)
View(ppl_filtered)
class(ppl_filtered$last_valid_date)
ppl_filtered = ppl_vehicles %>%
filter(vehicle_type %in% c("Taxi","Livery","Jitney")) %>%
mutate(last_valid_datetime = as.POSIXct(last_valid_date,format = "%Y-%m-%d %H:%M:%S")) %>%
arrange(public_vehicle_number,last_valid_datetime)
ppl_filtered = ppl_vehicles %>%
filter(vehicle_type %in% c("Taxi","Livery","Jitney")) %>%
mutate(last_valid_datetime = as.POSIXct(last_valid_date,format = "%Y-%m-%d %H:%M:%S")) %>%
arrange(public_vehicle_number,last_valid_datetime) %>%
select(-X)
ppl_filtered = ppl_vehicles %>%
filter(vehicle_type %in% c("Taxi","Livery","Jitney")) %>%
mutate(last_valid_datetime = as.POSIXct(last_valid_date,format = "%Y-%m-%d %H:%M:%S")) %>%
arrange(public_vehicle_number,last_valid_datetime) %>%
mutate(approx_vehicle_start = case_when(lag(public_vehicle_number) == public_vehicle_number ~ lag(last_valid_datetime),
.default = last_valid_datetime)) %>%
select(-X)
month(1)
last_valid_date = "2020-01-01 10:00:04"
as.POSIXct(last_valid_date,format = "%Y-%m-%d %H:%M:%S") - month(1)
as.POSIXct(last_valid_date,format = "%Y-%m-%d %H:%M:%S") - 1
as.POSIXct(last_valid_date,format = "%Y-%m-%d %H:%M:%S") - 30
as.POSIXct(last_valid_date,format = "%Y-%m-%d") - 30
as.ymd(last_valid_date,format = "%Y-%m-%d") - 30
ymd(last_valid_date,format = "%Y-%m-%d") - 30
as.POSIXct(last_valid_date,format = "%Y-%m-%d") - months(1)
ppl_filtered = ppl_vehicles %>%
filter(vehicle_type %in% c("Taxi","Livery","Jitney")) %>%
mutate(last_valid_datetime = as.POSIXct(last_valid_date,format = "%Y-%m-%d %H:%M:%S")) %>%
arrange(public_vehicle_number,last_valid_datetime) %>%
mutate(approx_vehicle_start = case_when(lag(public_vehicle_number) == public_vehicle_number ~ lag(last_valid_datetime),
.default = last_valid_datetime - months(1))) %>%
select(-X)
ppl_filtered = ppl_vehicles %>%
filter(vehicle_type %in% c("Taxi","Livery","Jitney") & status != "INACTIVE") %>%
mutate(last_valid_datetime = as.POSIXct(last_valid_date,format = "%Y-%m-%d %H:%M:%S")) %>%
arrange(public_vehicle_number,last_valid_datetime) %>%
mutate(approx_vehicle_start = case_when(lag(public_vehicle_number) == public_vehicle_number ~ lag(last_valid_datetime),
.default = last_valid_datetime - months(1))) %>%
select(-X)
ppl_filtered %>% distinct(status)
ppl_filtered = ppl_vehicles %>%
filter(vehicle_type %in% c("Taxi","Livery","Jitney") & status != "INACTIVE") %>%
mutate(last_valid_datetime = as.POSIXct(last_valid_date,format = "%Y-%m-%d %H:%M:%S")) %>%
arrange(public_vehicle_number,last_valid_datetime) %>%
mutate(first_valid_datetime = case_when(lag(public_vehicle_number) == public_vehicle_number ~ lag(last_valid_datetime),
.default = last_valid_datetime - months(1))) %>%
select(-X)
library(tidyverse)
library(dplyr)
tnc_fleet = read.csv("TNC_monthly_composition_all_years.csv") %>%
mutate(datetime = as.POSIXct(date, format = "%Y-%m-%d"),
powertrain = case_when(powertrain == "pct_EV" ~ "Battery Electric",
powertrain == "pct_Hybrid" ~ "Hybrid",
powertrain == "pct_ICE" ~ "ICE",
powertrain == "pct_no_ID" ~ "Not Identified",
.default = "Plug-in Hybrid"))
breaks = seq.POSIXt(from = as.POSIXct("2018-06-01", format = "%Y-%m-%d"), to = as.POSIXct("2024-04-01", format = "%Y-%m-%d"), by = "6 months")
ggplot(data = tnc_fleet, aes(x = datetime, y= fleet_pct, color = powertrain)) +
geom_line() +
ylab("% of Total Vehicle Fleet") +
xlab("Month Reported") +
labs(color = "Powertrain") +
ggtitle("Chicago TNC Vehicle Fleet Powertrain Evolution over Time") +
scale_x_datetime(breaks = breaks, date_labels = "%m-%Y") +
scale_y_continuous(breaks = seq(0,100, by = 10), limits = c(0,100)) +
geom_vline(xintercept = as.POSIXct("2022-05-01",format = "%Y-%m-%d"), color = "blue", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2022-09-15",format = "%Y-%m-%d"), color = "blue") +
geom_vline(xintercept = as.POSIXct("2020-09-01",format = "%Y-%m-%d"), color = "black", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2023-06-01",format = "%Y-%m-%d"), color = "black") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
View(tnc_fleet)
ppl_filtered = ppl_vehicles %>%
filter(vehicle_type %in% c("Taxi","Livery","Jitney") & status == "ACTIVE") %>%
mutate(last_valid_datetime = as.POSIXct(last_valid_date,format = "%Y-%m-%d %H:%M:%S")) %>%
arrange(public_vehicle_number,last_valid_datetime) %>%
mutate(first_valid_datetime = case_when(lag(public_vehicle_number) == public_vehicle_number ~ lag(last_valid_datetime),
.default = last_valid_datetime - months(1))) %>%
select(-X)
library(dplyr)
library(tidyverse)
ppl_vehicles = read.csv("public_passenger_license_data.csv")
ppl_filtered = ppl_vehicles %>%
filter(vehicle_type %in% c("Taxi","Livery","Jitney") & status == "ACTIVE") %>%
mutate(last_valid_datetime = as.POSIXct(last_valid_date,format = "%Y-%m-%d %H:%M:%S")) %>%
arrange(public_vehicle_number,last_valid_datetime) %>%
mutate(first_valid_datetime = case_when(lag(public_vehicle_number) == public_vehicle_number ~ lag(last_valid_datetime),
.default = last_valid_datetime - months(1))) %>%
select(-X)
