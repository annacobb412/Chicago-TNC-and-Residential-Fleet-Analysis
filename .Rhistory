mutate(atvType = factor(atvType, levels = atv_order, ordered = TRUE)) %>%
group_by(make_model,year) %>%
slice_min(order_by = atvType, n = 1, with_ties = FALSE) %>%
ungroup() %>%
mutate(atvType = as.character(atvType))
# filling in the gaps in make + model manufacturing years (e.g., if in the FE
# dataset, toyota prius is listed for the years 2008 & 2010-2024, I want to fill
# in 2009)
fe_vehicles = fe_vehicles %>%
group_by(make_model) %>%
complete(year = full_seq(c(min(year), 2024), 1)) %>%
fill(everything(), .direction = "down") %>%
ungroup() %>%
mutate(make_model_year = paste(make_model,year),
make_base_model_year = paste(make_base_model,year)) %>%
filter(!(is.na(make_model)))
# filtering out makes from TNC vehicles that are not in fuel economy list
tnc_makes = tnc_vehicles %>% group_by(MAKE) %>% summarize(tnc_count = n())
fe_makes = fe_vehicles %>% group_by(make) %>% summarize(count = n())
not_captured_make = tnc_makes %>% filter(!(str_detect(MAKE,regex(paste(fe_makes$make,collapse = "|"),ignore_case = TRUE))))
not_captured_make_count = sum(not_captured_make$tnc_count)
tnc_vehicles = tnc_vehicles %>% filter(!(MAKE %in% not_captured_make$MAKE))
#------------------CORRECTING KNOWN TYPOS IN TNC MAKE & MODEL NAMES-------------
tnc_vehicles = tnc_vehicles %>%
mutate(MAKE = case_when(str_detect(MAKE,regex("chev|chv",ignore_case = TRUE)) ~ "Chevrolet",
str_detect(MAKE,regex("Chr",ignore_case = TRUE)) ~ "Chrysler",
str_detect(MAKE,regex("toy",ignore_case = TRUE)) ~ "Toyota",
str_detect(MAKE,regex("ford",ignore_case = TRUE)) ~ "Ford",
str_detect(MAKE,regex("ram",ignore_case = TRUE)) ~ "Ram",
str_detect(MAKE,regex("cardillac|cadilac",ignore_case = TRUE)) ~ "Cadillac",
str_detect(MAKE,regex("doge",ignore_case = TRUE)) ~ "Dodge",
str_detect(MAKE,regex("hoda",ignore_case = TRUE)) ~ "Honda",
str_detect(MAKE,regex("Hydundia",ignore_case = TRUE)) ~ "Hyundai",
str_detect(MAKE,regex("infinity",ignore_case = TRUE)) ~ "Infiniti",
str_detect(MAKE,regex("jmc|general motors|gmc",ignore_case = TRUE)) ~ "GMC",
str_detect(MAKE,regex("licoin|lincoin",ignore_case = TRUE)) ~ "Lincoln",
str_detect(MAKE,regex("Mecede|Mercede",ignore_case = TRUE)) ~ "Mercedes-Benz",
str_detect(MAKE,regex("volkswagon",ignore_case = TRUE)) ~ "Volkswagen",
str_detect(MAKE,regex("satum",ignore_case = TRUE)) ~ "Saturn",
str_detect(MAKE,regex("rolls",ignore_case = TRUE)) ~ "Rolls-Royce",
str_detect(MAKE,regex("Mazada|Naza",ignore_case = TRUE)) ~ "Mazda",
str_detect(MAKE,regex("kia",ignore_case = TRUE)) ~ "Kia",
str_detect(MAKE,regex("baic|buick",ignore_case = TRUE)) ~ "Buick",
str_detect(MAKE,regex("bmw|baw",ignore_case = TRUE)) ~ "BMW",
.default = MAKE)) %>%
mutate(MODEL = case_when(str_detect(MODEL,regex("\\dseries|\\d series|\\d-series",ignore_case = TRUE)) ~ paste(str_extract(MODEL,regex("\\d")),"Series"),
str_detect(MODEL,regex("bolt",ignore_case = TRUE)) ~ "Bolt EV", # fe vehicles don't include bolt along and "bolt" will match to "volt" before "bolt EV"
str_detect(MODEL,regex("E-Niro|E Niro",ignore_case = TRUE)) ~ "Niro Electric",
str_detect(MODEL,regex("town",ignore_case = TRUE)) & MAKE == "Chrysler" ~ "Town and Country",
str_detect(MODEL,regex("mazda",ignore_case = TRUE)) ~ str_extract(MODEL,regex("\\d")),
str_detect(MODEL,regex("caravan",ignore_case = TRUE)) & MAKE == "Dodge" ~ "Caravan/Ram Van",
str_detect(MODEL,regex("G sedan",ignore_case = TRUE)) & MAKE == "Infiniti" ~ "G20",
str_detect(MODEL,regex("c max energi|cmax energi|c-max energi",ignore_case = TRUE)) ~ "C-MAX Energi Plug-in Hybrid",
.default = MODEL))
#----------------CORRECTING UNKNOWN TYPOS IN TNC MAKE & MODEL NAMES-------------
make_model_fe = fe_vehicles %>% distinct(make_model,.keep_all = TRUE)
make_model_tnc = tnc_vehicles %>%
group_by(MAKE,MODEL,MONTH_REPORTED) %>%
summarize(count = n()) %>%
mutate(make_model = paste(MAKE,MODEL))
# these are the make + model combos listed in the TNC vehicle fleet that are not
# in the FE vehicle data (potentially due to typos)
not_captured_make_model = make_model_tnc %>%
filter(!(str_detect(make_model,regex(paste(make_model_fe$make_model,collapse = "|"),ignore_case = TRUE)) |
str_detect(make_model,regex(paste(make_model_fe$make_base_model,collapse = "|"),ignore_case = TRUE)))) %>%
drop_na()
for (ind in 1:nrow(not_captured_make_model)) {
if (ind %% 10 == 0) {print(paste("Vehicle", ind, "/", nrow(not_captured_make_model)))}
make_model_nc = not_captured_make_model$make_model[ind]
# use stringsim function to determine how similar the "not captured" make model
# combos are to all make model combos in the fuel economy dataset
meep = make_model_fe %>%
mutate(mm_nc = make_model_nc) %>%
select(make_model,make_base_model,mm_nc) %>%
mutate(sim_mm = stringsim(tolower(make_model),tolower(mm_nc),method = "jw"),
sim_mm_base = stringsim(tolower(make_base_model),tolower(mm_nc),method = "jw")) %>%
arrange(desc(sim_mm)) %>%
drop_na()
max_mm = max(meep$sim_mm)
max_mm_base = max(meep$sim_mm_base)
not_captured_make_model[ind,"max_sim_mm_value"] = max_mm
not_captured_make_model[ind,"max_sim_mm"] = meep$make_model[which.max(meep$sim_mm)]
not_captured_make_model[ind,"max_sim_mm_base_value"] = max_mm_base
not_captured_make_model[ind,"max_sim_mm_base"] = meep$make_base_model[which.max(meep$sim_mm_base)]
}
# safe_matches are all the TNC make model combos that are similar enough to make
# model combos in the fuel economy dataset that I deem it safe to assume that
# what's listed in the fuel economy dataset is what the TNC driver meant
safe_matches = not_captured_make_model %>%
filter(max_sim_mm_value >= 0.9 | max_sim_mm_base_value >= 0.9) %>%
mutate(final_make_model = case_when(max_sim_mm_value > max_sim_mm_base_value ~ max_sim_mm,
max_sim_mm_value < max_sim_mm_base_value ~ max_sim_mm_base,
.default = max_sim_mm))
# these are the leftover vehicles that can't be classified due to typos or
# incorrectly supplied make/model (e.g., Acura Camry)
leftover = not_captured_make_model %>% filter(max_sim_mm_value < 0.9 & max_sim_mm_base_value < 0.9)
leftover_count = sum(leftover$count)
print(paste("# of TNC vehicles with no match after checking for both known & unknown typos is:",as.character(leftover_count)))
leftover_vehicles = leftover %>%
group_by(MONTH_REPORTED) %>%
summarize(vehicle_count = sum(count)) %>%
mutate(powertrain = "not_identified") %>%
select(powertrain,MONTH_REPORTED,vehicle_count)
# creating lists of make model combos to match to the tnc vehicle dataset directly
make_model_fe_patterns <- paste(make_model_fe$make_model, collapse = "|")
make_base_model_patterns <- paste(make_model_fe$make_base_model, collapse = "|")
safe_matches_patterns <- paste(safe_matches$make_model, collapse = "|")
# specifying for each vehicle whether or not it has a match in the three lists
# created above. If it's one of the not captured models that we figured out a
# safe match for, we replace the original make_model with the make model combo
# we determined is a safe match
all_models <- tnc_vehicles %>%
group_by(MAKE, MODEL, YEAR, MONTH_REPORTED) %>%
summarize(count = n(), .groups = 'drop') %>%
drop_na() %>%
mutate(make_model_v1 = paste(MAKE, MODEL)) %>%
mutate(make_model = case_when(str_detect(make_model_v1, regex(make_model_fe_patterns, ignore_case = TRUE)) | str_detect(make_model_v1, regex(make_base_model_patterns, ignore_case = TRUE)) ~ make_model_v1,
str_detect(make_model_v1, regex(safe_matches_patterns)) ~ map_chr(make_model_v1, ~ {match_index <- which(str_detect(.x, safe_matches$make_model))
if (length(match_index) > 0) safe_matches$final_make_model[match_index[1]] else "no match"}), TRUE ~ "no match"))
models_matched = all_models %>%
filter(make_model != "no match") %>%
mutate(make_model_year = paste(make_model,YEAR))
#----------------CREATING FUEL ECONOMY MODEL LISTS BY POWERTRAIN----------------
ev_list = fe_vehicles %>% filter(atvType == "EV") %>% filter(make != "Polestar") # getting rid of the model "2"
phev_list = fe_vehicles %>% filter(atvType == "Plug-in Hybrid")
hybrid_list = fe_vehicles %>% filter(atvType == "Hybrid")
fc_list = fe_vehicles %>% filter(atvType == "FCV") # fuel cell
ice_list = fe_vehicles %>% filter(atvType == "")
#-----------------------------SELECTING HYBRIDS---------------------------------
# interesting note: having the make model year (so you get something like Hyundai Ioniq 2024) prevents similarly named cars with different
# powertrains from getting selected (Hyundai Ioniq 5 2020) whereas without the year, Hyundai Ioniq (a hybrid) on the hybrid list would
# select Hyundai Ioniq 5 from the models_matched list
hybrid_model_year_list = hybrid_list$make_model_year
tnc_hybrid_model_years = models_matched %>%
filter((str_detect(make_model_year,regex(paste(hybrid_model_year_list,collapse = "|"),ignore_case = TRUE)) |
str_detect(MODEL,regex("hybrid|hybird|hibrid|hybryd",ignore_case = TRUE))) &
!(str_detect(MODEL,regex("plug in|plug-in|plugin|phev| e-tron| electric| ev",ignore_case = TRUE))))
hybrid_model_list = hybrid_list$make_model
tnc_hybrid_models = models_matched %>%
filter((str_detect(make_model,regex(paste(hybrid_model_list,collapse = "|"),ignore_case = TRUE)) |
str_detect(MODEL,regex("hybrid|hybird|hibrid|hybryd",ignore_case = TRUE))) &
!(str_detect(MODEL,regex("plug in|plug-in|plugin|phev| e-tron| electric| ev",ignore_case = TRUE))))
tnc_hybrid_model_years = add_shortened_names(tnc_models =  tnc_hybrid_models,
tnc_model_years = tnc_hybrid_model_years,
atv_label = "Hybrid")
tnc_hybrid_model_years = tnc_hybrid_model_years %>%
mutate(powertrain = "Hybrid")
#--------------------------------SELECTING BEVS---------------------------------
ev_model_year_list = ev_list$make_model_year
tnc_ev_model_years = models_matched %>%
filter((str_detect(make_model_year,regex(paste(ev_model_year_list,collapse = "|"),ignore_case = TRUE)) |
str_detect(MAKE,regex("Tesla|Rivian|Polestar",ignore_case = TRUE))   |
str_detect(MODEL,regex("bolt| EV$|electric|e-tron",ignore_case = TRUE))) &
!(str_detect(MODEL,regex("Caravan/Grand Caravan|I30|I35"))))
ev_model_list = ev_list$make_model
tnc_ev_models = models_matched %>%
filter((str_detect(make_model,regex(paste(ev_model_list,collapse = "|"),ignore_case = TRUE)) |
str_detect(MAKE,regex("Tesla|Rivian|Polestar",ignore_case = TRUE))   |
str_detect(MODEL,regex("bolt| EV$|electric|e-tron",ignore_case = TRUE))) &
!(str_detect(MODEL,regex("Caravan/Grand Caravan|I30|I35"))))
tnc_ev_model_years = add_shortened_names(tnc_ev_models,tnc_ev_model_years,"EV")
tnc_ev_model_years = tnc_ev_model_years %>%
mutate(powertrain = "EV")
#-------------------------------SELECTING PHEVS---------------------------------
phev_model_year_list = phev_list$make_model_year
tnc_phev_model_years = models_matched %>%
filter(str_detect(make_model_year,regex(paste(phev_model_year_list,collapse = "|"),ignore_case = TRUE)) |
str_detect(MODEL,regex("plug-in|plug in|phev",ignore_case = TRUE)) |
str_detect(MODEL,regex("530e|330e|745e|Edrive|energi"))) # these are specific models I've checked for
phev_model_list = phev_list$make_model
tnc_phev_models = models_matched %>%
filter(str_detect(make_model,regex(paste(phev_model_list,collapse = "|"),ignore_case = TRUE)) |
str_detect(MODEL,regex("plug-in|plug in|phev",ignore_case = TRUE)) |
str_detect(MODEL,regex("530e|330e|745e|Edrive|energi"))) # these are specific models I've checked for
tnc_phev_model_years = add_shortened_names(tnc_phev_models,tnc_phev_model_years,"Plug-in Hybrid")
tnc_phev_model_years = tnc_phev_model_years %>%
mutate(powertrain = "PHEV")
#-------------------------------SELECTING FCEVS---------------------------------
fc_model_year_list = fc_list$make_model_year
tnc_fc_model_years = models_matched %>%
filter(str_detect(make_model_year,regex(paste(fc_model_year_list,collapse = "|"),ignore_case = TRUE)))
tnc_fc_model_years = tnc_fc_model_years %>%
mutate(powertrain = "FCV")
#-----------------------------SELECTING ICE VEHICLES----------------------------
tnc_ice_vehicles = anti_join(models_matched,tnc_ev_model_years) %>%
anti_join(tnc_fc_model_years) %>%
anti_join(tnc_hybrid_model_years) %>%
anti_join(tnc_phev_model_years) %>%
mutate(powertrain = "ICE")
#--------PUTTING ALL VEHICLE COUNTS TOGETHER AND WRITING TO CSV-----------------
tnc_vehicles = rbind(tnc_ice_vehicles,
tnc_ev_model_years,
tnc_phev_model_years,
tnc_hybrid_model_years,
tnc_fc_model_years)
# write.csv(tnc_vehicles,"TNC_vehicles_classified_all_years.csv")
monthly_composition = tnc_vehicles %>%
filter(powertrain != "FCV") %>%
group_by(powertrain,MONTH_REPORTED) %>%
summarize(vehicle_count = sum(count)) %>%
rbind(leftover_vehicles) %>%
pivot_wider(names_from = powertrain, values_from = vehicle_count) %>%
rowwise() %>%
mutate(total_vehicles = sum(ICE,EV,PHEV,Hybrid,not_identified),
pct_ICE = 100*round(ICE/total_vehicles,4),
pct_EV = 100*round(EV/total_vehicles,4),
pct_Hybrid = 100*round(Hybrid/total_vehicles,4),
pct_PHEV = 100*round(PHEV/total_vehicles,4),
pct_no_ID = 100*round(not_identified/total_vehicles,4),
date = as.POSIXct(paste0(MONTH_REPORTED,"-01"),format = "%Y-%m-%d")) %>%
pivot_longer(cols = c(pct_ICE,pct_EV,pct_PHEV,pct_Hybrid,pct_no_ID), names_to = "powertrain", values_to = "fleet_pct") %>%
ungroup()
write.csv(monthly_composition,"TNC_monthly_composition_IL_all_years.csv")
ev_count = read.csv("Chicago_EV_Counts.csv")
ff_count = read.csv("Chicago_FlexFuel_Count.csv")
h_count = read.csv("Chicago_Hybrid_Count.csv")
all_count = read.csv("Chicago_all_count.csv")
# processing
alt_veh = rbind(ev_count %>% mutate(powertrain = "EV"),
ff_count %>% mutate(powertrain = "Flex_Fuel"),
h_count %>% mutate(powertrain = "Hybrid"))
alt_veh_count = alt_veh %>%
mutate(count = rowSums(alt_veh %>% select(starts_with("X")),na.rm = TRUE),
date_format = case_when(powertrain == "EV" ~ paste0(substr(Date,1,nchar(Date)-2),"20",substr(Date,nchar(Date)-1,nchar(Date))),
.default = Date),
date = case_when(powertrain == "EV" ~ as.POSIXct(date_format, format = "%m/%d/%Y"),
.default = as.POSIXct(date_format, format = "%Y-%m-%d"))) %>%
select(date,powertrain,count) %>%
filter(date > as.POSIXct("2017-12-15",format = "%Y-%m-%d")) %>%
pivot_wider(names_from = powertrain, values_from = count)
all_count_new = data.frame(date = alt_veh_count$date,all = c(rep(all_count$Passenger_Vehicle_Count[1],12),
rep(all_count$Passenger_Vehicle_Count[2],11),
rep(all_count$Passenger_Vehicle_Count[3],12),
rep(all_count$Passenger_Vehicle_Count[4],12),
rep(all_count$Passenger_Vehicle_Count[5],12),
rep(all_count$Passenger_Vehicle_Count[6],12),
rep(all_count$Passenger_Vehicle_Count[7],5)))
all_veh = left_join(alt_veh_count,all_count_new, by = join_by(date)) %>%
mutate(ICE = all - EV - Hybrid,
pct_ICE = 100*round(ICE/all,4),
pct_EV = 100*round(EV/all,4),
pct_Hybrid = 100*round(Hybrid/all,4)) %>%
pivot_longer(cols = pct_ICE:pct_Hybrid,
names_to = "powertrain",
values_to = "vehicle_pct") %>%
mutate(powertrain = case_when(powertrain == "pct_EV" ~ "'Electric'",
powertrain == "pct_Hybrid" ~ "'Hybrid'",
.default = "ICE"))
breaks = seq.POSIXt(from = as.POSIXct("2018-06-01", format = "%Y-%m-%d"), to = as.POSIXct("2024-04-01", format = "%Y-%m-%d"), by = "6 months")
ggplot(data = all_veh, aes(x = date, y = vehicle_pct, color = powertrain)) +
geom_line() +
ylab("% of Total Vehicle Fleet") +
xlab("Month Reported") +
labs(color = "Powertrain") +
ggtitle("Chicago Residential Vehicles Powertrain Evolution over Time") +
scale_x_datetime(breaks = breaks, date_labels = "%m-%Y") +
scale_y_continuous(breaks = seq(0,100, by = 10), limits = c(0,100)) +
geom_vline(xintercept = as.POSIXct("2022-05-01",format = "%Y-%m-%d"), color = "blue", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2022-09-15",format = "%Y-%m-%d"), color = "blue") +
geom_vline(xintercept = as.POSIXct("2020-09-01",format = "%Y-%m-%d"), color = "black", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2023-06-01",format = "%Y-%m-%d"), color = "black") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
tnc_fleet = read.csv("TNC_monthly_composition_IL_all_years.csv") %>%
mutate(datetime = as.POSIXct(date, format = "%Y-%m-%d") + 3600*24*14) %>%
select(datetime,ICE,EV,Hybrid,PHEV,total_vehicles) %>%
rename(ICE_TNC = ICE, EV_TNC = EV, Hybrid_TNC = Hybrid, PHEV_TNC = PHEV, total_TNC = total_vehicles)
tnc_res = tnc_fleet %>%
distinct() %>%
left_join(all_veh %>% select(-vehicle_pct,-powertrain) %>%  distinct(),
by = join_by("datetime" == "date")) %>%
mutate(EV_overall = EV - EV_TNC,
hybrid_overall = Hybrid - Hybrid_TNC - PHEV_TNC, # CHANGE THIS IF YOU FIND OUT WHERE PHEVs GO
ICE_overall = ICE - ICE_TNC)
all_veh_adjusted = tnc_res %>%
select(datetime,EV_overall, hybrid_overall,ICE_overall) %>%
mutate(total = EV_overall + hybrid_overall + ICE_overall,
pct_ICE = 100*round(ICE_overall/total,4),
pct_EV = 100*round(EV_overall/total,4),
pct_hybrid = 100*round(hybrid_overall/total,4)) %>%
pivot_longer(cols = pct_ICE:pct_hybrid,
names_to = powertrain,
values_to = vehicles_pct)
all_veh_adjusted = tnc_res %>%
select(datetime,EV_overall, hybrid_overall,ICE_overall) %>%
mutate(total = EV_overall + hybrid_overall + ICE_overall,
pct_ICE = 100*round(ICE_overall/total,4),
pct_EV = 100*round(EV_overall/total,4),
pct_hybrid = 100*round(hybrid_overall/total,4))
View(all_veh_adjusted)
View(tnc_res)
View(all_count_new)
View(all_veh)
tnc_res = tnc_fleet %>%
distinct() %>%
left_join(all_veh %>% select(-vehicle_pct,powertrain) %>%  distinct(),
by = join_by("datetime" == "date")) %>%
mutate(EV_overall = EV - EV_TNC,
hybrid_overall = Hybrid - Hybrid_TNC - PHEV_TNC, # CHANGE THIS IF YOU FIND OUT WHERE PHEVs GO
ICE_overall = ICE - ICE_TNC)
tnc_res = tnc_fleet %>%
distinct() %>%
left_join(all_veh %>% select(-vehicle_pct) %>%  distinct(),
by = join_by("datetime" == "date")) %>%
mutate(EV_overall = EV - EV_TNC,
hybrid_overall = Hybrid - Hybrid_TNC - PHEV_TNC, # CHANGE THIS IF YOU FIND OUT WHERE PHEVs GO
ICE_overall = ICE - ICE_TNC)
View(tnc_fleet)
meep = read.csv("TNC_monthly_composition_IL_all_years.csv")
View(meep)
tnc_fleet = read.csv("TNC_monthly_composition_IL_all_years.csv") %>%
mutate(datetime = as.POSIXct(paste0(MONTH_REPORTED,'-15'), format = "%Y-%m-%d")) %>%
select(datetime,ICE,EV,Hybrid,PHEV,total_vehicles) %>%
rename(ICE_TNC = ICE, EV_TNC = EV, Hybrid_TNC = Hybrid, PHEV_TNC = PHEV, total_TNC = total_vehicles)
tnc_res = tnc_fleet %>%
distinct() %>%
left_join(all_veh %>% select(-vehicle_pct) %>%  distinct(),
by = join_by("datetime" == "date")) %>%
mutate(EV_overall = EV - EV_TNC,
hybrid_overall = Hybrid - Hybrid_TNC - PHEV_TNC, # CHANGE THIS IF YOU FIND OUT WHERE PHEVs GO
ICE_overall = ICE - ICE_TNC)
all_veh_adjusted = tnc_res %>%
select(datetime,EV_overall, hybrid_overall,ICE_overall) %>%
mutate(total = EV_overall + hybrid_overall + ICE_overall,
pct_ICE = 100*round(ICE_overall/total,4),
pct_EV = 100*round(EV_overall/total,4),
pct_hybrid = 100*round(hybrid_overall/total,4))
View(all_veh_adjusted)
all_veh_adjusted = tnc_res %>%
select(datetime,EV_overall, hybrid_overall,ICE_overall) %>%
mutate(total = EV_overall + hybrid_overall + ICE_overall,
pct_ICE = 100*round(ICE_overall/total,4),
pct_EV = 100*round(EV_overall/total,4),
pct_hybrid = 100*round(hybrid_overall/total,4)) %>%
pivot_longer(cols = pct_ICE:pct_hybrid,
names_to = powertrain,
values_to = vehicles_pct)
all_veh_adjusted = tnc_res %>%
select(datetime,EV_overall, hybrid_overall,ICE_overall) %>%
mutate(total = EV_overall + hybrid_overall + ICE_overall,
pct_ICE = 100*round(ICE_overall/total,4),
pct_EV = 100*round(EV_overall/total,4),
pct_hybrid = 100*round(hybrid_overall/total,4)) %>%
pivot_longer(cols = pct_ICE:pct_hybrid,
names_to = "powertrain",
values_to = "vehicles_pct")
ggplot(data = all_veh_adjusted, aes(x = date, y = vehicle_pct, color = powertrain)) +
geom_line() +
ylab("% of Total Vehicle Fleet") +
xlab("Month Reported") +
labs(color = "Powertrain") +
ggtitle("Chicago Residential Vehicles Powertrain Evolution over Time\n[with TNCs registered in IL subtracted]") +
scale_x_datetime(breaks = breaks, date_labels = "%m-%Y") +
scale_y_continuous(breaks = seq(0,100, by = 10), limits = c(0,100)) +
geom_vline(xintercept = as.POSIXct("2022-05-01",format = "%Y-%m-%d"), color = "blue", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2022-09-15",format = "%Y-%m-%d"), color = "blue") +
geom_vline(xintercept = as.POSIXct("2020-09-01",format = "%Y-%m-%d"), color = "black", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2023-06-01",format = "%Y-%m-%d"), color = "black") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
all_veh_adjusted = tnc_res %>%
select(datetime,EV_overall, hybrid_overall,ICE_overall) %>%
mutate(total = EV_overall + hybrid_overall + ICE_overall,
pct_ICE = 100*round(ICE_overall/total,4),
pct_EV = 100*round(EV_overall/total,4),
pct_hybrid = 100*round(hybrid_overall/total,4)) %>%
pivot_longer(cols = pct_ICE:pct_hybrid,
names_to = "powertrain",
values_to = "vehicle_pct")
ggplot(data = all_veh_adjusted, aes(x = date, y = vehicle_pct, color = powertrain)) +
geom_line() +
ylab("% of Total Vehicle Fleet") +
xlab("Month Reported") +
labs(color = "Powertrain") +
ggtitle("Chicago Residential Vehicles Powertrain Evolution over Time\n[with TNCs registered in IL subtracted]") +
scale_x_datetime(breaks = breaks, date_labels = "%m-%Y") +
scale_y_continuous(breaks = seq(0,100, by = 10), limits = c(0,100)) +
geom_vline(xintercept = as.POSIXct("2022-05-01",format = "%Y-%m-%d"), color = "blue", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2022-09-15",format = "%Y-%m-%d"), color = "blue") +
geom_vline(xintercept = as.POSIXct("2020-09-01",format = "%Y-%m-%d"), color = "black", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2023-06-01",format = "%Y-%m-%d"), color = "black") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
View(all_veh_adjusted)
ggplot(data = all_veh_adjusted, aes(x = datetime, y = vehicle_pct, color = powertrain)) +
geom_line() +
ylab("% of Total Vehicle Fleet") +
xlab("Month Reported") +
labs(color = "Powertrain") +
ggtitle("Chicago Residential Vehicles Powertrain Evolution over Time\n[with TNCs registered in IL subtracted]") +
scale_x_datetime(breaks = breaks, date_labels = "%m-%Y") +
scale_y_continuous(breaks = seq(0,100, by = 10), limits = c(0,100)) +
geom_vline(xintercept = as.POSIXct("2022-05-01",format = "%Y-%m-%d"), color = "blue", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2022-09-15",format = "%Y-%m-%d"), color = "blue") +
geom_vline(xintercept = as.POSIXct("2020-09-01",format = "%Y-%m-%d"), color = "black", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2023-06-01",format = "%Y-%m-%d"), color = "black") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
all_veh_adjusted = tnc_res %>%
select(datetime,EV_overall, hybrid_overall,ICE_overall) %>%
mutate(total = EV_overall + hybrid_overall + ICE_overall,
pct_ICE = 100*round(ICE_overall/total,4),
pct_EV = 100*round(EV_overall/total,4),
pct_hybrid = 100*round(hybrid_overall/total,4)) %>%
pivot_longer(cols = pct_ICE:pct_hybrid,
names_to = "powertrain",
values_to = "vehicle_pct") %>%
mutate(powertrain = case_when(powertrain == "pct_ICE" ~ "ICE",
powertrain == "pct_hybrid" ~ "'Hybrid'",
.default = "'Electric'"))
ggplot(data = all_veh_adjusted, aes(x = datetime, y = vehicle_pct, color = powertrain)) +
geom_line() +
ylab("% of Total Vehicle Fleet") +
xlab("Month Reported") +
labs(color = "Powertrain") +
ggtitle("Chicago Residential Vehicles Powertrain Evolution over Time\n[with TNCs registered in IL subtracted]") +
scale_x_datetime(breaks = breaks, date_labels = "%m-%Y") +
scale_y_continuous(breaks = seq(0,100, by = 10), limits = c(0,100)) +
geom_vline(xintercept = as.POSIXct("2022-05-01",format = "%Y-%m-%d"), color = "blue", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2022-09-15",format = "%Y-%m-%d"), color = "blue") +
geom_vline(xintercept = as.POSIXct("2020-09-01",format = "%Y-%m-%d"), color = "black", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2023-06-01",format = "%Y-%m-%d"), color = "black") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
all_data_combined = rbind(all_veh_adjusted %>% mutate(status = "adjusted"),
all_veh %>% mutate(status = "unadjusted"))
View(all_veh)
View(all_veh_adjusted)
select(-Flex_Fuel,datetime,EV_overall,hybrid_overall,ICE_overall,total,
powertrain,vehicle_pct) %>%
all_data_combined = rbind(all_veh_adjusted %>% mutate(status = "adjusted"),
all_veh %>% mutate(status = "unadjusted"))
formatted_all_veh = all_veh %>%
rename(datetime = date, EV_overall = EV, hybrid_overall = Hybrid,
ICE_overall = ICE, all = total) %>%
select(-Flex_Fuel) %>%
select(datetime,EV_overall,hybrid_overall,ICE_overall,total, powertrain,vehicle_pct)
formatted_all_veh = all_veh %>%
rename(datetime = date, EV_overall = EV, hybrid_overall = Hybrid,
ICE_overall = ICE, total = all) %>%
select(-Flex_Fuel) %>%
select(datetime,EV_overall,hybrid_overall,ICE_overall,total, powertrain,vehicle_pct)
all_data_combined = rbind(all_veh_adjusted %>% mutate(status = "adjusted"),
all_veh %>% mutate(status = "unadjusted"))
all_data_combined = rbind(all_veh_adjusted %>% mutate(status = "adjusted"),
formatted_all_veh %>% mutate(status = "unadjusted"))
all_res_data_combined = rbind(all_veh_adjusted %>% mutate(status = "adjusted"),
formatted_all_veh %>% mutate(status = "unadjusted"))
ggplot(data = all_res_data_combined, aes(x = datetime, y = vehicle_pct, color = powertrain)) +
geom_line() +
ylab("% of Total Vehicle Fleet") +
xlab("Month Reported") +
labs(color = "Powertrain") +
ggtitle("Chicago Residential Vehicles Powertrain Evolution over Time\n[with TNCs registered in IL subtracted]") +
scale_x_datetime(breaks = breaks, date_labels = "%m-%Y") +
scale_y_continuous(breaks = seq(0,100, by = 10), limits = c(0,100)) +
geom_vline(xintercept = as.POSIXct("2022-05-01",format = "%Y-%m-%d"), color = "blue", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2022-09-15",format = "%Y-%m-%d"), color = "blue") +
geom_vline(xintercept = as.POSIXct("2020-09-01",format = "%Y-%m-%d"), color = "black", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2023-06-01",format = "%Y-%m-%d"), color = "black") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = all_res_data_combined, aes(x = datetime, y = vehicle_pct, color = powertrain,
lintype = status)) +
geom_line() +
ylab("% of Total Vehicle Fleet") +
xlab("Month Reported") +
labs(color = "Powertrain") +
ggtitle("Chicago Residential Vehicles Powertrain Evolution over Time\n[with TNCs registered in IL subtracted]") +
scale_x_datetime(breaks = breaks, date_labels = "%m-%Y") +
scale_y_continuous(breaks = seq(0,100, by = 10), limits = c(0,100)) +
geom_vline(xintercept = as.POSIXct("2022-05-01",format = "%Y-%m-%d"), color = "blue", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2022-09-15",format = "%Y-%m-%d"), color = "blue") +
geom_vline(xintercept = as.POSIXct("2020-09-01",format = "%Y-%m-%d"), color = "black", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2023-06-01",format = "%Y-%m-%d"), color = "black") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = all_res_data_combined, aes(x = datetime, y = vehicle_pct, color = powertrain,
linetype = status)) +
geom_line() +
ylab("% of Total Vehicle Fleet") +
xlab("Month Reported") +
labs(color = "Powertrain") +
ggtitle("Chicago Residential Vehicles Powertrain Evolution over Time\n[with TNCs registered in IL subtracted]") +
scale_x_datetime(breaks = breaks, date_labels = "%m-%Y") +
scale_y_continuous(breaks = seq(0,100, by = 10), limits = c(0,100)) +
geom_vline(xintercept = as.POSIXct("2022-05-01",format = "%Y-%m-%d"), color = "blue", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2022-09-15",format = "%Y-%m-%d"), color = "blue") +
geom_vline(xintercept = as.POSIXct("2020-09-01",format = "%Y-%m-%d"), color = "black", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2023-06-01",format = "%Y-%m-%d"), color = "black") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
ggplot(data = all_res_data_combined, aes(x = datetime, y = vehicle_pct, color = powertrain,
linetype = status)) +
geom_line() +
ylab("% of Total Vehicle Fleet") +
xlab("Month Reported") +
labs(color = "Powertrain") +
ggtitle("Chicago Residential Vehicles Powertrain Evolution over Time\n[with TNCs registered in IL subtracted]") +
scale_x_datetime(breaks = breaks, date_labels = "%m-%Y") +
scale_y_continuous(breaks = seq(0,100, by = 10), limits = c(0,100)) +
geom_vline(xintercept = as.POSIXct("2022-05-01",format = "%Y-%m-%d"), color = "blue", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2022-09-15",format = "%Y-%m-%d"), color = "blue") +
geom_vline(xintercept = as.POSIXct("2020-09-01",format = "%Y-%m-%d"), color = "black", linetype = "dashed") +
geom_vline(xintercept = as.POSIXct("2023-06-01",format = "%Y-%m-%d"), color = "black") +
theme_bw() +
labs(linetype = "Data Status") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
View(leftover)
View(leftover)
sum(leftover$count)
nrow(leftover %>% distinct(make_model))
